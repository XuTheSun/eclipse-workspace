package com.guanxu.freshBird;

public class BTree {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		BTreeBuilder builder = BTreeBuilder.getInstance();
		TreeNode root = new TreeNode();
		int[] a = {1};
		root = builder.create(root, a ,0);
//		printTree(root);
//		System.out.println(".........");
//		printTree(maxNode(root));
//		System.out.println(maxDepth(root));
//		printTree(root);
//		System.out.print(isNull(root.left));
		System.out.print(root.right == null);
		
	}

	public static void printTree(TreeNode root){
		if(root != null && root.val != 0) {
			System.out.println(root.index +":"+root.val);
			printTree(root.left);
			printTree(root.right);
		}
	} 
	
    public static TreeNode maxNode(TreeNode root) {
        // write your code here
        if(root == null)
            return null;
        TreeNode r, l;
        l = maxNode(root.right);
        r = maxNode(root.left);
        if(l != null){
            if(root.val < l.val){
                root = l;
            }
        }
        if(r != null){
            if(root.val < r.val){
                root = r;
            }
        }
        return root;
    }
    
    public static int maxDepth(TreeNode root) {
        // write your code here
        int depth = 0;
        int depthR = 0, depthL = 0;
        if(root != null){
        	depth++;
        	if(isNull(root.left) && isNull(root.right)) {
        		return 1;
        	}
            if(root.left != null){
                depthL += maxDepth(root.left);
            }
            if(root.right != null){
                depthR += maxDepth(root.right);
            }
            depth += depthR<depthL?depthL:depthR;
        }
        return depth;
    }
    
    public static boolean isNull(TreeNode node) {
    	return node == null || node.val == 0;
    }
    
    public static class BTreeBuilder{
 	   
 	   private static BTreeBuilder instance;
 	   
 	   public static BTreeBuilder getInstance() {
 		   if(instance == null)
 			   return instance = new BTreeBuilder();
 		   return instance;
 	   }
 	   
 	   public TreeNode create(TreeNode root, int[] data, int index) {
 		   if(data.length - 1 >= index) {
 			   if(data[index] == 0){
 				   root = null;
 			   }else {
 				   TreeNode r = new TreeNode();
 				   TreeNode l = new TreeNode();
 				   root.val = data[index];
 				   root.index = index;
 				   root.left = create(l, data, index*2+1);
 				   root.right = create(r, data, index*2+2);
 				   }
 			   }
 		   return root;
 	   }
    }
    
	   public static class TreeNode {
 	       public int val;
 	       public int index;
 	       public TreeNode left, right;
 	       public TreeNode() {}
 	       public TreeNode(int val) {
 	           this.val = val;
 	           this.left = this.right = null;
 	       }
 	   }
	
}

//  Definition of TreeNode:

   
